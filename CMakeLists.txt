CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(LinuxDetours CXX)

set(DETOURS_MAJOR_VERSION 1)
set(DETOURS_MINOR_VERSION 0)
set(DETOURS_PATCH_VERSION 0)
set(DETOURS_BUILD_NO 001)

MESSAGE("CMAKE_SYSTEM_VERSION: ${CMAKE_SYSTEM_VERSION}")
MESSAGE("CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE("CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
MESSAGE("CMAKE_SYSTEM: ${CMAKE_SYSTEM}")
MESSAGE("CMAKE_LIBRARY_ARCHITECTURE: ${CMAKE_LIBRARY_ARCHITECTURE}")
message("DETOURS_VERSION: ${DETOURS_MAJOR_VERSION}.${DETOURS_MINOR_VERSION}.${DETOURS_PATCH_VERSION}-${DETOURS_BUILD_NO}")

IF (NOT CPU_COUNT)
    SET(CPU_COUNT 4)
ENDIF()

IF (NOT PLATFORM)
    IF (KERNEL_NAME MATCHES "Darwin")
        SET(PLATFORM "macos_x64")
    ELSEIF (KERNEL_NAME MATCHES "Linux")
        IF (MACHINE_NAME MATCHES "x86_64")
            SET(PLATFORM "linux_x64")
        ELSEIF (MACHINE_NAME MATCHES "mips64")
            SET(PLATFORM "linux_mips64")
        ELSEIF (MACHINE_NAME MATCHES "arm")
            SET(PLATFORM "linux_arm")
        ELSE ()
            SET(PLATFORM "linux_arm64")
        ENDIF()
    ENDIF()
ENDIF()
MESSAGE("PLATFORM: ${PLATFORM}")

IF (APPLE)
    SET(CMAKE_MACOSX_RPATH 1)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.9")
    #disable some warnings
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-register -Wno-unused-local-typedef -Wno-macro-redefined")
ENDIF()

IF (NOT WIN32)
    SET(CMAKE_CXX_FLAGS "-Wall -pthread -std=c++0x ${CMAKE_CXX_FLAGS}")
    SET(CMAKE_CXX_FLAGS_DEBUG "-D_DEBUG -g -fprofile-arcs -ftest-coverage")
    SET(CMAKE_CXX_FLAGS_RELEASE " -fprofile-arcs -ftest-coverage")

    IF (PLATFORM MATCHES "macos_x64")
        SET(CMAKE_CXX_FLAGS "-D_AMD64_ -D_UNIX64 ${CMAKE_CXX_FLAGS}")
    ELSEIF (PLATFORM MATCHES "linux_x64")
        SET(CMAKE_CXX_FLAGS "-D_AMD64_ -D_UNIX64 ${CMAKE_CXX_FLAGS}")
    ELSEIF (PLATFORM MATCHES "linux_mips64")
        SET(CMAKE_CXX_FLAGS "-D_MIPS64_ -D_UNIX64 ${CMAKE_CXX_FLAGS}")
    ELSEIF (PLATFORM MATCHES "linux_arm")
        SET(CMAKE_CXX_FLAGS "-mcpu=cortex-a5 -D_ARM_ -D_ARM32_ ${CMAKE_CXX_FLAGS}")
    ELSEif (PLATFORM MATCHES "linux_arm64")
        SET(CMAKE_CXX_FLAGS "-D_ARM64_ -D_UNIX64 ${CMAKE_CXX_FLAGS}")
    ENDIF()
ELSE()
    ADD_DEFINITIONS(-DWIN32_LEAN_AND_MEAN)
    SET(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /MDD /ZI /OB0 /OD /RTC1")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /ZI")
    SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /INCREMENTAL:NO /DEBUG /OPT:REF /OPT:ICF")
    SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /INCREMENTAL:NO /DEBUG /OPT:REF /OPT:ICF")
ENDIF()

include_directories(${PROJECT_SOURCE_DIR}/src)
link_directories(LinuxDetours "/usr/local/lib/")
set(CMAKE_VERBOSE_MAKEFILE ON)

set(CPACK_PACKAGE_VENDOR "SkyGuard, Inc.")
set(CPACK_PACKAGE_VERSION ${DETOURS_MAJOR_VERSION}.${DETOURS_MINOR_VERSION}.${DETOURS_PATCH_VERSION}-${DETOURS_BUILD_NO})
set(CPACK_PACKAGE_VERSION_MAJOR ${DETOURS_MAJOR_VERSION})
set(CPACK_PACKAGE_VERSION_MINOR ${DETOURS_MINOR_VERSION})
set(CPACK_PACKAGE_VERSION_PATCH ${DETOURS_PATCH_VERSION})

set(CPACK_GENERATOR TGZ)
set(CPACK_NEOKYLIN7_PACKAGE_ARCHITECTURE neokylin7-ls64)

set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
set(CPACK_PROJECT_CONFIG_FILE ${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules/package.cmake)

ADD_SUBDIRECTORY(src)
include(CPack)
